# Makefile for AbstractMachine Kernels and Libraries

### *Get a more readable version of this Makefile* by `make html` (requires python-markdown)
html:
	cat Makefile | sed 's/^\([^#]\)/    \1/g' | markdown_py > Makefile.html
.PHONY: html

## 1. Basic Setup and Checks

SPEC=
### Default to create a bare-metal kernel image
ifeq ($(MAKECMDGOALS),)
  MAKECMDGOALS  = $(APP)
  .DEFAULT_GOAL = $(APP)
endif

### Override checks when `make clean/clean-all/html`
ifeq ($(findstring $(MAKECMDGOALS),clean|clean-all|html),)

### Print build info message
$(info # Building $(NAME)-$(MAKECMDGOALS))

### Check: environment variable `$ARCH` must be in the supported list
ARCH ?= x86_64
ARCHS = $(basename $(notdir $(shell ls ../scripts/*.mk)))
ifeq ($(filter $(ARCHS), $(ARCH)), )
  $(error Expected $$ARCH in {$(ARCHS)}, Got "$(ARCH)")
endif

### Checks end here
endif

## 2. General Compilation Targets

### Create the destination directory (`build/`)
WORK_DIR  = .
DST_DIR   = $(WORK_DIR)/build
$(shell mkdir -p $(DST_DIR))

### Compilation targets 
APP_REL = build/$(NAME)
APP     = $(abspath $(APP_REL))

### Files to be linked: object files (`.o`) and libraries (`.a`)
OBJS := $(patsubst %.F,%.fppized.o,$(SRCS))
OBJS := $(patsubst %.F90,%.fppized.o,$(OBJS))
OBJS := $(patsubst %.f90,%.o,$(OBJS))
OBJS := $(patsubst %.f,%.o,$(OBJS))
OBJS := $(patsubst %.c,%.o,$(OBJS))
OBJS := $(patsubst %.C,%.o,$(OBJS))
OBJS := $(patsubst %.cpp,%.o,$(OBJS))
OBJS := $(patsubst %.cc,%.o,$(OBJS))
OBJS := $(addprefix $(DST_DIR)/, $(OBJS))

## 3. General Compilation Flags

-include $(WORK_DIR)/../scripts/$(ARCH).mk

### (Cross) compilers, e.g., mips-linux-gnu-g++
CC        = $(CROSS_COMPILE)gcc
CXX       = $(CROSS_COMPILE)g++
FC        = $(CROSS_COMPILE)gfortran
ifeq ($(LD_FORTRAN),1)
LD        = $(FC)
else ifeq ($(LD_CXX),1)
LD        = $(CXX)
else
LD        = $(CC)
endif
OBJDUMP   = $(CROSS_COMPILE)objdump
OBJCOPY   = $(CROSS_COMPILE)objcopy
READELF   = $(CROSS_COMPILE)readelf

### Compilation flags

CFLAGS   += -O3 -MMD -DSPEC_CPU -DNDEBUG -static -D_FILE_OFFSET_BITS=64 -fno-strict-aliasing -flto $(TESTSET_SPECIFIC_FLAG)
CXXFLAGS +=  $(CFLAGS)
FFLAGS   += -O3 $(FFLAGS_EXTRA) -static -fno-strict-aliasing -flto $(TESTSET_SPECIFIC_FLAG)
LDFLAGS  += -O3 -static -flto
SPECPPFLAGS += -o
LIBS = 
ifeq ($(LD_JEMALLOC),1)
LIBS += $(RISCV)/lib/libjemalloc.a -lm -pthread
endif

## 4. Compilation Rules

### Rule (compile): a single `.c` -> `.o` (gcc)
$(DST_DIR)/%.o: %.c
	@mkdir -p $(dir $@) && echo + CC $<
	@$(CC) $(CFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.C` -> `.o` (g++)
$(DST_DIR)/%.o: %.C
	@mkdir -p $(dir $@) && echo + CXX $<
	@$(CXX) $(CXXFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.cc` -> `.o` (g++)
$(DST_DIR)/%.o: %.cc
	@mkdir -p $(dir $@) && echo + CXX $<
	@$(CXX) $(CXXFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.cpp` -> `.o` (g++)
$(DST_DIR)/%.o: %.cpp
	@mkdir -p $(dir $@) && echo + CXX $<
	@$(CXX) $(CXXFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.f` -> `.o` (gfortran)
$(DST_DIR)/%.o: %.f
	@mkdir -p $(dir $@) && echo + FC $<
	@cd $(dir $<) && $(FC) $(FFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.fppized.f90` -> `.fppized.o` (gfortran)
$(DST_DIR)/%.fppized.o: %.fppized.f90
	@mkdir -p $(dir $@) && echo + FC $<
	@cd $(dir $<) && $(FC) $(FFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.fppized.f` -> `.fppized.o` (gfortran)
$(DST_DIR)/%.fppized.o: %.fppized.f
	@mkdir -p $(dir $@) && echo + FC $<
	@cd $(dir $<) && $(FC) $(FFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.f90` -> `.o` (gfortran)
$(DST_DIR)/%.o: %.f90
	@mkdir -p $(dir $@) && echo + FC $<
	@cd $(dir $<) && $(FC) $(FFLAGS) -c -o $(abspath $@) $(abspath $<)

### Rule (compile): a single `.F90` -> `.fppized.o` (gfortran)
%.fppized.f90: %.F90
	@echo + PREPARE $<
	@cd $(dir $<) && ${SPEC}/bin/specperl ${SPEC}/bin/specpp $(SPECPPFLAGS) $(abspath $@) $(abspath $<)

### Rule (compile): a single `.F` -> `.fppized.o` (gfortran)
%.fppized.f: %.F
	@echo + PREPARE $<
	@cd $(dir $<) && ${SPEC}/bin/specperl ${SPEC}/bin/specpp $(SPECPPFLAGS) $(abspath $@) $(abspath $<)

.NOTPARALLEL: $(abspath build/GemsFDTD) $(abspath build/tonto) $(abspath build/wrf)
### Rule (link): objects (`*.o`) and libraries (`*.a`) -> `IMAGE.elf`, the final ELF binary to be packed into image (ld)
$(APP): $(OBJS)
	@echo + LD "->" $(APP_REL)
	@$(LD) $(LDFLAGS) -o $(abspath $@) $(abspath $^) $(LIBS)

### Rule (`#include` dependencies): paste in `.d` files generated by gcc on `-MMD`
-include $(addprefix $(DST_DIR)/, $(addsuffix .d, $(basename $(SRCS))))

## 5. Running Rules

DIFF = diff
SPECDIFF_FILE =  ../tools/specdiff
SPECDIFF = cd $(dir $(SPECDIFF_FILE)) && ./specdiff -m -l 10 $(1) $(abspath $(2)) $(abspath $(3))

# prototype: cmd_template(size)
define cmd_template
run-$(1): $$(APP)
	@sh $(WORK_DIR)/../scripts/run-template.sh $(WORK_DIR)/run-$(1).sh
	@echo ============ Checking $(notdir $$<) ============
	@$(MAKE) -s $(1)-cmp
	@echo ""

endef

$(eval $(foreach size,test train ref,$(call cmd_template,$(size))))

## 6. Miscellaneous

### Clean a single project (remove `build/`)
clean:
	rm -rf Makefile.html $(WORK_DIR)/build/ $(WORK_DIR)/run/ src/*.mod
.PHONY: clean

### Clean all sub-projects within depth 2 (and ignore errors)
CLEAN_ALL = $(dir $(shell find . -mindepth 2 -name Makefile))
clean-all: $(CLEAN_ALL) clean
$(CLEAN_ALL):
	-@$(MAKE) -s -C $@ clean
.PHONY: clean-all $(CLEAN_ALL)
